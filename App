import tkinter as tk
from tkinter import messagebox


def evaluate(board):
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != "":
            return 10 if row[0] == "O" else -10

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != "":
            return 10 if board[0][col] == "O" else -10

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != "":
        return 10 if board[0][0] == "O" else -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != "":
        return 10 if board[0][2] == "O" else -10

    return 0

def is_moves_left(board):
    for row in board:
        if "" in row:
            return True
    return False

def minimax(board, depth, is_max):
    score = evaluate(board)
    if score == 10 or score == -10:
        return score
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == "":
                    board[i][j] = "O"
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = ""
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == "":
                    board[i][j] = "X"
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = ""
        return best

def find_best_move(board):
    best_val = -1000
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == "":
                board[i][j] = "O"
                move_val = minimax(board, 0, False)
                board[i][j] = ""
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move


class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("AI Tic-Tac-Toe")
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.board = [["" for _ in range(3)] for _ in range(3)]
        self.create_board()

    def create_board(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(self.root, text="", font=('Arial', 32), width=5, height=2,
                                               command=lambda row=i, col=j: self.player_move(row, col))
                self.buttons[i][j].grid(row=i, column=j)

    def player_move(self, row, col):
        if self.board[row][col] == "":
            self.board[row][col] = "X"
            self.buttons[row][col].config(text="X", state="disabled")
            if evaluate(self.board) == -10:
                self.end_game("You Win!")
                return
            elif not is_moves_left(self.board):
                self.end_game("Draw!")
                return
            self.root.after(500, self.ai_move)

    def ai_move(self):
        row, col = find_best_move(self.board)
        if row != -1:
            self.board[row][col] = "O"
            self.buttons[row][col].config(text="O", state="disabled")
            if evaluate(self.board) == 10:
                self.end_game("AI Wins!")
            elif not is_moves_left(self.board):
                self.end_game("Draw!")

    def end_game(self, result):
        messagebox.showinfo("Game Over", result)
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
